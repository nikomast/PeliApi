@page
@model PeliApi.Pages.GameModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Game</title>
    <style>

        /* Add styles for your Pong game here, e.g., paddles, ball, etc. */
        #gameContainer {
            /* Example styles */
            width: 600px;
            height: 300px;
            border: 1px solid black;
            position: relative;
        }
        
        .paddle {
            width: 10px;
            height: 20px;
            background-color: black;
            position: absolute;
        }

        .paddle2 {
            width: 10px;
            height: 300px;
            background-color: black;
            position: absolute;
        }
        
        .ball {
            width: 10px;
            height: 10px;
            background-color: red;
            position: absolute;
        }

        #restartButton {
            display: none;
        }

        #playerName {
            display: none;
        }

    </style>
</head>
<body>

<div id="gameContainer">
    <div id="player1" class="paddle" style="left: 0;"></div>
    <div id="player2" class="paddle2" style="right: 0;"></div>
    <div id="ball" class="ball"></div>
</div>
    <h4 id="toTheMoon" style="display: none;"> Ei tolla kuuhun mennä</h4>
    <h4 id="playerScore"></h4>
    <input type="text" id="playerName" name="playerName" placeholder="Player Name" style="display: none;">
    <button id="submitScoreButton" onclick="submitScore()" style="display: none;">Submit Score</button>
    <button id="restartButton" style="display: none;" onclick="restartGame()">Restart Game</button>
    <h2 id="loadText" style="display: none;">Loading.....</h2>
    <div id="scoresSection" style="display: none;">
        <h2>Top Scores</h2>
        <ul id="scoreList"></ul>
    </div>




<script>
        let gameState = null;  // Declare gameState globally
        let test = 0;
        async function fetchGameState() {
            //console.log("Fetching game state...");
            try {
                const response = await fetch('/api/game/state');
                if (!response.ok) {
                    //console.error("Failed to fetch game state:", await response.text());
                    return;
                }

                const responseData = await response.text();
                gameState = JSON.parse(responseData);  // Parse the raw data to JSON and set the global gameState

                document.getElementById('player1').style.top = gameState.player1.yPosition + "px";
                document.getElementById('player2').style.top = gameState.player2.yPosition + "px";
                document.getElementById('ball').style.left = gameState.ball.xPosition + "px";
                document.getElementById('ball').style.top = gameState.ball.yPosition + "px";

                // Logic to display or hide the restart button based on the game state
                if (gameState && !gameState.state.value && test == 0) {
                    fetchTopScores(); 
                    document.getElementById("loadText").style.display = "block";
                }
                document.getElementById('playerScore').innerText = "Score: " + gameState.player1.score;
            } catch (error) {
                console.error("Error fetching game state:", error);
            }
        }

        document.addEventListener('keydown', async (event) => {
            if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
                const direction = { Up: event.key === 'ArrowUp', Down: event.key === 'ArrowDown' };
                await fetch('/api/game/movePlayer1', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(direction)
                });
                fetchGameState();  // Update game state after movement
            }
        });

        setInterval(async () => {
            await fetch('/api/game/updateBall', { method: 'POST' });
            fetchGameState();  // Get the updated game state
        }, 100);  // Every 100ms, adjust as needed

        // Initial fetch
        fetchGameState();

        function restartGame() {
            hideTopScores();
            test = 0;
            fetch('/api/game/reset', {
                method: 'POST'
            })
                .then(response => response.json())
                .then(data => {
                    if (data === "Game reset.") {
                        // Here, you'd also reset the game state on the client-side,
                        // maybe redraw the game canvas, reset scores on the UI, etc.
                    }
                });
        }

        async function fetchTopScores() {
            try {
                let response = await fetch("/api/highscores/top/5");
                if (!response.ok) {
                    console.error('Failed to fetch top scores:', response.statusText);
                    return;
                }
                let data = await response.json();
                console.log("Fetched data from API:", data);

                if (data && data.length) {
                    displayTopScores(data);
                }
            } catch (error) {
                console.error("Failed to fetch top scores:", error);
            }
        }

        function displayTopScores(scores) {
            test = 1;
            let scoreList = document.getElementById("scoreList");
            scoreList.innerHTML = scores.map(score => `<li>${score.playerName}: ${score.score}</li>`).join('');
            document.getElementById("loadText").style.display = "none";
            document.getElementById("restartButton").style.display = "block";
            document.getElementById("playerName").style.display = "block";
            document.getElementById("submitScoreButton").style.display = "block";
            document.getElementById("scoresSection").style.display = "block";
        }

    function hideTopScores() {
            document.getElementById("toTheMoon").style.display = "none";
            document.getElementById("restartButton").style.display = "none";
            document.getElementById("playerName").style.display = "none";
            document.getElementById("submitScoreButton").style.display = "none";
            document.getElementById("scoresSection").style.display = "none";
    }

        async function submitScore() {
            // Get player name and score
            const playerNameInput = document.getElementById("playerName");
            const playerName = playerNameInput.value;
            const playerScore = gameState ? gameState.player1.score : 0; // or wherever you are storing the score

            // Data to send to the server
            const scoreData = {
                PlayerName: playerName,
                Score: playerScore
            };
            console.log("Sending score data:", scoreData);

            try {
                const response = await fetch("/api/highscores/record", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(scoreData)
                });

                if (!response.ok) {
                    console.error('Failed to submit score:', await response.text());
                    document.getElementById("toTheMoon").style.display = "block";
                    document.getElementById("submitScoreButton").style.display = "none";
                    document.getElementById("playerName").style.display = "none";
                    return;
                }

                const responseData = await response.text();
                console.log("Response from server:", responseData);

                // Optionally fetch top scores again to update the list
                fetchTopScores();

            } catch (error) {
                console.error("Error submitting score:", error);
            }
        }



</script>

</body>
</html>
